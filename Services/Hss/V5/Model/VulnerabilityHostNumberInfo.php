<?php

namespace HuaweiCloud\SDK\Hss\V5\Model;

use \ArrayAccess;
use HuaweiCloud\SDK\Core\Utils\ObjectSerializer;
use HuaweiCloud\SDK\Core\Utils\ModelInterface;
use HuaweiCloud\SDK\Core\SdkResponse;

class VulnerabilityHostNumberInfo implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
    * The original name of the model.
    *
    * @var string
    */
    protected static $openAPIModelName = 'VulnerabilityHostNumberInfo';

    /**
    * Array of property to type mappings. Used for (de)serialization
    * important  **参数解释**: 重要主机数量 **取值范围**: 取值0-10000
    * common  **参数解释**: 一般主机数量 **取值范围**: 取值0-10000
    * test  **参数解释**: 测试主机数量 **取值范围**: 取值0-10000
    *
    * @var string[]
    */
    protected static $openAPITypes = [
            'important' => 'int',
            'common' => 'int',
            'test' => 'int'
    ];

    /**
    * Array of property to format mappings. Used for (de)serialization
    * important  **参数解释**: 重要主机数量 **取值范围**: 取值0-10000
    * common  **参数解释**: 一般主机数量 **取值范围**: 取值0-10000
    * test  **参数解释**: 测试主机数量 **取值范围**: 取值0-10000
    *
    * @var string[]
    */
    protected static $openAPIFormats = [
        'important' => 'int32',
        'common' => 'int32',
        'test' => 'int32'
    ];

    /**
    * Array of property to type mappings. Used for (de)serialization
    *
    * @return array
    */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
    * Array of property to format mappings. Used for (de)serialization
    *
    * @return array
    */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
    * Array of attributes where the key is the local name,
    * and the value is the original name
    * important  **参数解释**: 重要主机数量 **取值范围**: 取值0-10000
    * common  **参数解释**: 一般主机数量 **取值范围**: 取值0-10000
    * test  **参数解释**: 测试主机数量 **取值范围**: 取值0-10000
    *
    * @var string[]
    */
    protected static $attributeMap = [
            'important' => 'important',
            'common' => 'common',
            'test' => 'test'
    ];

    /**
    * Array of attributes to setter functions (for deserialization of responses)
    * important  **参数解释**: 重要主机数量 **取值范围**: 取值0-10000
    * common  **参数解释**: 一般主机数量 **取值范围**: 取值0-10000
    * test  **参数解释**: 测试主机数量 **取值范围**: 取值0-10000
    *
    * @var string[]
    */
    protected static $setters = [
            'important' => 'setImportant',
            'common' => 'setCommon',
            'test' => 'setTest'
    ];

    /**
    * Array of attributes to getter functions (for serialization of requests)
    * important  **参数解释**: 重要主机数量 **取值范围**: 取值0-10000
    * common  **参数解释**: 一般主机数量 **取值范围**: 取值0-10000
    * test  **参数解释**: 测试主机数量 **取值范围**: 取值0-10000
    *
    * @var string[]
    */
    protected static $getters = [
            'important' => 'getImportant',
            'common' => 'getCommon',
            'test' => 'getTest'
    ];

    /**
    * Array of attributes where the key is the local name,
    * and the value is the original name
    *
    * @return array
    */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
    * Array of attributes to setter functions (for deserialization of responses)
    *
    * @return array
    */
    public static function setters()
    {
        return self::$setters;
    }

    /**
    * Array of attributes to getter functions (for serialization of requests)
    *
    * @return array
    */
    public static function getters()
    {
        return self::$getters;
    }

    /**
    * The original name of the model.
    *
    * @return string
    */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }
    


    /**
    * Associative array for storing property values
    *
    * @var mixed[]
    */
    protected $container = [];

    /**
    * Constructor
    *
    * @param mixed[] $data Associated array of property values
    *                      initializing the model
    */
    public function __construct(array $data = null)
    {
        $this->container['important'] = isset($data['important']) ? $data['important'] : null;
        $this->container['common'] = isset($data['common']) ? $data['common'] : null;
        $this->container['test'] = isset($data['test']) ? $data['test'] : null;
    }

    /**
    * Show all the invalid properties with reasons.
    *
    * @return array invalid properties with reasons
    */
    public function listInvalidProperties()
    {
        $invalidProperties = [];
            if (!is_null($this->container['important']) && ($this->container['important'] > 10000)) {
                $invalidProperties[] = "invalid value for 'important', must be smaller than or equal to 10000.";
            }
            if (!is_null($this->container['important']) && ($this->container['important'] < 0)) {
                $invalidProperties[] = "invalid value for 'important', must be bigger than or equal to 0.";
            }
            if (!is_null($this->container['common']) && ($this->container['common'] > 10000)) {
                $invalidProperties[] = "invalid value for 'common', must be smaller than or equal to 10000.";
            }
            if (!is_null($this->container['common']) && ($this->container['common'] < 0)) {
                $invalidProperties[] = "invalid value for 'common', must be bigger than or equal to 0.";
            }
            if (!is_null($this->container['test']) && ($this->container['test'] > 10000)) {
                $invalidProperties[] = "invalid value for 'test', must be smaller than or equal to 10000.";
            }
            if (!is_null($this->container['test']) && ($this->container['test'] < 0)) {
                $invalidProperties[] = "invalid value for 'test', must be bigger than or equal to 0.";
            }
        return $invalidProperties;
    }

    /**
    * Validate all the properties in the model
    * return true if all passed
    *
    * @return bool True if all properties are valid
    */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }

    /**
    * Gets important
    *  **参数解释**: 重要主机数量 **取值范围**: 取值0-10000
    *
    * @return int|null
    */
    public function getImportant()
    {
        return $this->container['important'];
    }

    /**
    * Sets important
    *
    * @param int|null $important **参数解释**: 重要主机数量 **取值范围**: 取值0-10000
    *
    * @return $this
    */
    public function setImportant($important)
    {
        $this->container['important'] = $important;
        return $this;
    }

    /**
    * Gets common
    *  **参数解释**: 一般主机数量 **取值范围**: 取值0-10000
    *
    * @return int|null
    */
    public function getCommon()
    {
        return $this->container['common'];
    }

    /**
    * Sets common
    *
    * @param int|null $common **参数解释**: 一般主机数量 **取值范围**: 取值0-10000
    *
    * @return $this
    */
    public function setCommon($common)
    {
        $this->container['common'] = $common;
        return $this;
    }

    /**
    * Gets test
    *  **参数解释**: 测试主机数量 **取值范围**: 取值0-10000
    *
    * @return int|null
    */
    public function getTest()
    {
        return $this->container['test'];
    }

    /**
    * Sets test
    *
    * @param int|null $test **参数解释**: 测试主机数量 **取值范围**: 取值0-10000
    *
    * @return $this
    */
    public function setTest($test)
    {
        $this->container['test'] = $test;
        return $this;
    }

    /**
    * Returns true if offset exists. False otherwise.
    *
    * @param integer $offset Offset
    *
    * @return boolean
    */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
    * Gets offset.
    *
    * @param integer $offset Offset
    *
    * @return mixed
    */
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
    * Sets value based on offset.
    *
    * @param integer $offset Offset
    * @param mixed   $value  Value to be set
    *
    * @return void
    */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
                $this->container[] = $value;
            } else {
                $this->container[$offset] = $value;
        }
    }

    /**
    * Unsets offset.
    *
    * @param integer $offset Offset
    *
    * @return void
    */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
    * Gets the string presentation of the object
    *
    * @return string
    */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }
}

