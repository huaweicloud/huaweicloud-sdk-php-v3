<?php

namespace HuaweiCloud\SDK\Hss\V5\Model;

use \ArrayAccess;
use HuaweiCloud\SDK\Core\Utils\ObjectSerializer;
use HuaweiCloud\SDK\Core\Utils\ModelInterface;
use HuaweiCloud\SDK\Core\SdkResponse;

class HandleImageVulnerabilityRequestBody implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
    * The original name of the model.
    *
    * @var string
    */
    protected static $openAPIModelName = 'HandleImageVulnerabilityRequestBody';

    /**
    * Array of property to type mappings. Used for (de)serialization
    * imageType  **参数解释**: 镜像类型 **约束限制**: 不涉及 **取值范围**: - local：本地镜像 - registry：仓库镜像 - cicd：cicd镜像  **默认取值**: 不涉及
    * type  **参数解释**: 漏洞类型 **约束限制**: 不涉及 **取值范围**: - linux_vul：Linux系统漏洞 - app_vul：应用漏洞  **默认取值**: 不涉及
    * operateType  **参数解释**: 对漏洞做的处置动作 **约束限制**: 不涉及 **取值范围**: - ignore：忽略 - not_ignore：取消忽略 - manual_repair：人工修复 - add_to_whitelist：加白  **默认取值**: 不涉及
    * handleStatus  **参数解释**: 需要处置的漏洞状态 **约束限制**: 不涉及 **取值范围**: - unhandled：待处理的漏洞 - handled：已处理的漏洞  **默认取值**: 不涉及
    * selectType  **参数解释**: 处置漏洞范围的类型 **约束限制**: 不涉及 **取值范围**: - all_vul：处置所有漏洞 - specific_image_all_vul：处置指定镜像的所有漏洞 - specific_vul_all_image：处置指定漏洞的全部镜像 - vul_view：通过漏洞维度指定需要处置的漏洞和镜像信息 - image_view：通过镜像维度指定需要处置的漏洞和镜像信息  **默认取值**: 不涉及
    * imageIdList  **参数解释**: select_type值为specific_image_all_vul时，该字段用于指定需要处置的镜像id列表 **约束限制**: 仅在select_type值为specific_image_all_vul时该字段有效 **取值范围**: 不涉及 **默认取值**: 不涉及
    * vulIdList  **参数解释**: select_type值为specific_vul_all_image时，该字段用于指定需要处置的漏洞id列表 **约束限制**: 仅在select_type值为specific_vul_all_image时该字段有效 **取值范围**: 不涉及 **默认取值**: 不涉及
    * vulDataList  **参数解释**: select_type值为vul_view时，该字段用于指定需要处置的漏洞和镜像信息 **约束限制**: 仅在select_type值为vul_view时该字段有效 **取值范围**: 不涉及 **默认取值**: 不涉及
    * imageDataList  **参数解释**: select_type值为image_view时，该字段用于指定需要处置的漏洞和镜像信息 **约束限制**: 仅在select_type值为image_view时该字段有效 **取值范围**: 不涉及 **默认取值**: 不涉及
    * remark  **参数解释**: 处置操作的描述信息 **约束限制**: 不涉及 **取值范围**: 字符长度0-512位 **默认取值**: 不涉及
    *
    * @var string[]
    */
    protected static $openAPITypes = [
            'imageType' => 'string',
            'type' => 'string',
            'operateType' => 'string',
            'handleStatus' => 'string',
            'selectType' => 'string',
            'imageIdList' => 'string[]',
            'vulIdList' => 'string[]',
            'vulDataList' => '\HuaweiCloud\SDK\Hss\V5\Model\HandleImageVulnerabilityRequestBodyVulDataList[]',
            'imageDataList' => '\HuaweiCloud\SDK\Hss\V5\Model\HandleImageVulnerabilityRequestBodyImageDataList[]',
            'remark' => 'string'
    ];

    /**
    * Array of property to format mappings. Used for (de)serialization
    * imageType  **参数解释**: 镜像类型 **约束限制**: 不涉及 **取值范围**: - local：本地镜像 - registry：仓库镜像 - cicd：cicd镜像  **默认取值**: 不涉及
    * type  **参数解释**: 漏洞类型 **约束限制**: 不涉及 **取值范围**: - linux_vul：Linux系统漏洞 - app_vul：应用漏洞  **默认取值**: 不涉及
    * operateType  **参数解释**: 对漏洞做的处置动作 **约束限制**: 不涉及 **取值范围**: - ignore：忽略 - not_ignore：取消忽略 - manual_repair：人工修复 - add_to_whitelist：加白  **默认取值**: 不涉及
    * handleStatus  **参数解释**: 需要处置的漏洞状态 **约束限制**: 不涉及 **取值范围**: - unhandled：待处理的漏洞 - handled：已处理的漏洞  **默认取值**: 不涉及
    * selectType  **参数解释**: 处置漏洞范围的类型 **约束限制**: 不涉及 **取值范围**: - all_vul：处置所有漏洞 - specific_image_all_vul：处置指定镜像的所有漏洞 - specific_vul_all_image：处置指定漏洞的全部镜像 - vul_view：通过漏洞维度指定需要处置的漏洞和镜像信息 - image_view：通过镜像维度指定需要处置的漏洞和镜像信息  **默认取值**: 不涉及
    * imageIdList  **参数解释**: select_type值为specific_image_all_vul时，该字段用于指定需要处置的镜像id列表 **约束限制**: 仅在select_type值为specific_image_all_vul时该字段有效 **取值范围**: 不涉及 **默认取值**: 不涉及
    * vulIdList  **参数解释**: select_type值为specific_vul_all_image时，该字段用于指定需要处置的漏洞id列表 **约束限制**: 仅在select_type值为specific_vul_all_image时该字段有效 **取值范围**: 不涉及 **默认取值**: 不涉及
    * vulDataList  **参数解释**: select_type值为vul_view时，该字段用于指定需要处置的漏洞和镜像信息 **约束限制**: 仅在select_type值为vul_view时该字段有效 **取值范围**: 不涉及 **默认取值**: 不涉及
    * imageDataList  **参数解释**: select_type值为image_view时，该字段用于指定需要处置的漏洞和镜像信息 **约束限制**: 仅在select_type值为image_view时该字段有效 **取值范围**: 不涉及 **默认取值**: 不涉及
    * remark  **参数解释**: 处置操作的描述信息 **约束限制**: 不涉及 **取值范围**: 字符长度0-512位 **默认取值**: 不涉及
    *
    * @var string[]
    */
    protected static $openAPIFormats = [
        'imageType' => null,
        'type' => null,
        'operateType' => null,
        'handleStatus' => null,
        'selectType' => null,
        'imageIdList' => null,
        'vulIdList' => null,
        'vulDataList' => null,
        'imageDataList' => null,
        'remark' => null
    ];

    /**
    * Array of property to type mappings. Used for (de)serialization
    *
    * @return array
    */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
    * Array of property to format mappings. Used for (de)serialization
    *
    * @return array
    */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
    * Array of attributes where the key is the local name,
    * and the value is the original name
    * imageType  **参数解释**: 镜像类型 **约束限制**: 不涉及 **取值范围**: - local：本地镜像 - registry：仓库镜像 - cicd：cicd镜像  **默认取值**: 不涉及
    * type  **参数解释**: 漏洞类型 **约束限制**: 不涉及 **取值范围**: - linux_vul：Linux系统漏洞 - app_vul：应用漏洞  **默认取值**: 不涉及
    * operateType  **参数解释**: 对漏洞做的处置动作 **约束限制**: 不涉及 **取值范围**: - ignore：忽略 - not_ignore：取消忽略 - manual_repair：人工修复 - add_to_whitelist：加白  **默认取值**: 不涉及
    * handleStatus  **参数解释**: 需要处置的漏洞状态 **约束限制**: 不涉及 **取值范围**: - unhandled：待处理的漏洞 - handled：已处理的漏洞  **默认取值**: 不涉及
    * selectType  **参数解释**: 处置漏洞范围的类型 **约束限制**: 不涉及 **取值范围**: - all_vul：处置所有漏洞 - specific_image_all_vul：处置指定镜像的所有漏洞 - specific_vul_all_image：处置指定漏洞的全部镜像 - vul_view：通过漏洞维度指定需要处置的漏洞和镜像信息 - image_view：通过镜像维度指定需要处置的漏洞和镜像信息  **默认取值**: 不涉及
    * imageIdList  **参数解释**: select_type值为specific_image_all_vul时，该字段用于指定需要处置的镜像id列表 **约束限制**: 仅在select_type值为specific_image_all_vul时该字段有效 **取值范围**: 不涉及 **默认取值**: 不涉及
    * vulIdList  **参数解释**: select_type值为specific_vul_all_image时，该字段用于指定需要处置的漏洞id列表 **约束限制**: 仅在select_type值为specific_vul_all_image时该字段有效 **取值范围**: 不涉及 **默认取值**: 不涉及
    * vulDataList  **参数解释**: select_type值为vul_view时，该字段用于指定需要处置的漏洞和镜像信息 **约束限制**: 仅在select_type值为vul_view时该字段有效 **取值范围**: 不涉及 **默认取值**: 不涉及
    * imageDataList  **参数解释**: select_type值为image_view时，该字段用于指定需要处置的漏洞和镜像信息 **约束限制**: 仅在select_type值为image_view时该字段有效 **取值范围**: 不涉及 **默认取值**: 不涉及
    * remark  **参数解释**: 处置操作的描述信息 **约束限制**: 不涉及 **取值范围**: 字符长度0-512位 **默认取值**: 不涉及
    *
    * @var string[]
    */
    protected static $attributeMap = [
            'imageType' => 'image_type',
            'type' => 'type',
            'operateType' => 'operate_type',
            'handleStatus' => 'handle_status',
            'selectType' => 'select_type',
            'imageIdList' => 'image_id_list',
            'vulIdList' => 'vul_id_list',
            'vulDataList' => 'vul_data_list',
            'imageDataList' => 'image_data_list',
            'remark' => 'remark'
    ];

    /**
    * Array of attributes to setter functions (for deserialization of responses)
    * imageType  **参数解释**: 镜像类型 **约束限制**: 不涉及 **取值范围**: - local：本地镜像 - registry：仓库镜像 - cicd：cicd镜像  **默认取值**: 不涉及
    * type  **参数解释**: 漏洞类型 **约束限制**: 不涉及 **取值范围**: - linux_vul：Linux系统漏洞 - app_vul：应用漏洞  **默认取值**: 不涉及
    * operateType  **参数解释**: 对漏洞做的处置动作 **约束限制**: 不涉及 **取值范围**: - ignore：忽略 - not_ignore：取消忽略 - manual_repair：人工修复 - add_to_whitelist：加白  **默认取值**: 不涉及
    * handleStatus  **参数解释**: 需要处置的漏洞状态 **约束限制**: 不涉及 **取值范围**: - unhandled：待处理的漏洞 - handled：已处理的漏洞  **默认取值**: 不涉及
    * selectType  **参数解释**: 处置漏洞范围的类型 **约束限制**: 不涉及 **取值范围**: - all_vul：处置所有漏洞 - specific_image_all_vul：处置指定镜像的所有漏洞 - specific_vul_all_image：处置指定漏洞的全部镜像 - vul_view：通过漏洞维度指定需要处置的漏洞和镜像信息 - image_view：通过镜像维度指定需要处置的漏洞和镜像信息  **默认取值**: 不涉及
    * imageIdList  **参数解释**: select_type值为specific_image_all_vul时，该字段用于指定需要处置的镜像id列表 **约束限制**: 仅在select_type值为specific_image_all_vul时该字段有效 **取值范围**: 不涉及 **默认取值**: 不涉及
    * vulIdList  **参数解释**: select_type值为specific_vul_all_image时，该字段用于指定需要处置的漏洞id列表 **约束限制**: 仅在select_type值为specific_vul_all_image时该字段有效 **取值范围**: 不涉及 **默认取值**: 不涉及
    * vulDataList  **参数解释**: select_type值为vul_view时，该字段用于指定需要处置的漏洞和镜像信息 **约束限制**: 仅在select_type值为vul_view时该字段有效 **取值范围**: 不涉及 **默认取值**: 不涉及
    * imageDataList  **参数解释**: select_type值为image_view时，该字段用于指定需要处置的漏洞和镜像信息 **约束限制**: 仅在select_type值为image_view时该字段有效 **取值范围**: 不涉及 **默认取值**: 不涉及
    * remark  **参数解释**: 处置操作的描述信息 **约束限制**: 不涉及 **取值范围**: 字符长度0-512位 **默认取值**: 不涉及
    *
    * @var string[]
    */
    protected static $setters = [
            'imageType' => 'setImageType',
            'type' => 'setType',
            'operateType' => 'setOperateType',
            'handleStatus' => 'setHandleStatus',
            'selectType' => 'setSelectType',
            'imageIdList' => 'setImageIdList',
            'vulIdList' => 'setVulIdList',
            'vulDataList' => 'setVulDataList',
            'imageDataList' => 'setImageDataList',
            'remark' => 'setRemark'
    ];

    /**
    * Array of attributes to getter functions (for serialization of requests)
    * imageType  **参数解释**: 镜像类型 **约束限制**: 不涉及 **取值范围**: - local：本地镜像 - registry：仓库镜像 - cicd：cicd镜像  **默认取值**: 不涉及
    * type  **参数解释**: 漏洞类型 **约束限制**: 不涉及 **取值范围**: - linux_vul：Linux系统漏洞 - app_vul：应用漏洞  **默认取值**: 不涉及
    * operateType  **参数解释**: 对漏洞做的处置动作 **约束限制**: 不涉及 **取值范围**: - ignore：忽略 - not_ignore：取消忽略 - manual_repair：人工修复 - add_to_whitelist：加白  **默认取值**: 不涉及
    * handleStatus  **参数解释**: 需要处置的漏洞状态 **约束限制**: 不涉及 **取值范围**: - unhandled：待处理的漏洞 - handled：已处理的漏洞  **默认取值**: 不涉及
    * selectType  **参数解释**: 处置漏洞范围的类型 **约束限制**: 不涉及 **取值范围**: - all_vul：处置所有漏洞 - specific_image_all_vul：处置指定镜像的所有漏洞 - specific_vul_all_image：处置指定漏洞的全部镜像 - vul_view：通过漏洞维度指定需要处置的漏洞和镜像信息 - image_view：通过镜像维度指定需要处置的漏洞和镜像信息  **默认取值**: 不涉及
    * imageIdList  **参数解释**: select_type值为specific_image_all_vul时，该字段用于指定需要处置的镜像id列表 **约束限制**: 仅在select_type值为specific_image_all_vul时该字段有效 **取值范围**: 不涉及 **默认取值**: 不涉及
    * vulIdList  **参数解释**: select_type值为specific_vul_all_image时，该字段用于指定需要处置的漏洞id列表 **约束限制**: 仅在select_type值为specific_vul_all_image时该字段有效 **取值范围**: 不涉及 **默认取值**: 不涉及
    * vulDataList  **参数解释**: select_type值为vul_view时，该字段用于指定需要处置的漏洞和镜像信息 **约束限制**: 仅在select_type值为vul_view时该字段有效 **取值范围**: 不涉及 **默认取值**: 不涉及
    * imageDataList  **参数解释**: select_type值为image_view时，该字段用于指定需要处置的漏洞和镜像信息 **约束限制**: 仅在select_type值为image_view时该字段有效 **取值范围**: 不涉及 **默认取值**: 不涉及
    * remark  **参数解释**: 处置操作的描述信息 **约束限制**: 不涉及 **取值范围**: 字符长度0-512位 **默认取值**: 不涉及
    *
    * @var string[]
    */
    protected static $getters = [
            'imageType' => 'getImageType',
            'type' => 'getType',
            'operateType' => 'getOperateType',
            'handleStatus' => 'getHandleStatus',
            'selectType' => 'getSelectType',
            'imageIdList' => 'getImageIdList',
            'vulIdList' => 'getVulIdList',
            'vulDataList' => 'getVulDataList',
            'imageDataList' => 'getImageDataList',
            'remark' => 'getRemark'
    ];

    /**
    * Array of attributes where the key is the local name,
    * and the value is the original name
    *
    * @return array
    */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
    * Array of attributes to setter functions (for deserialization of responses)
    *
    * @return array
    */
    public static function setters()
    {
        return self::$setters;
    }

    /**
    * Array of attributes to getter functions (for serialization of requests)
    *
    * @return array
    */
    public static function getters()
    {
        return self::$getters;
    }

    /**
    * The original name of the model.
    *
    * @return string
    */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }
    


    /**
    * Associative array for storing property values
    *
    * @var mixed[]
    */
    protected $container = [];

    /**
    * Constructor
    *
    * @param mixed[] $data Associated array of property values
    *                      initializing the model
    */
    public function __construct(array $data = null)
    {
        $this->container['imageType'] = isset($data['imageType']) ? $data['imageType'] : null;
        $this->container['type'] = isset($data['type']) ? $data['type'] : null;
        $this->container['operateType'] = isset($data['operateType']) ? $data['operateType'] : null;
        $this->container['handleStatus'] = isset($data['handleStatus']) ? $data['handleStatus'] : null;
        $this->container['selectType'] = isset($data['selectType']) ? $data['selectType'] : null;
        $this->container['imageIdList'] = isset($data['imageIdList']) ? $data['imageIdList'] : null;
        $this->container['vulIdList'] = isset($data['vulIdList']) ? $data['vulIdList'] : null;
        $this->container['vulDataList'] = isset($data['vulDataList']) ? $data['vulDataList'] : null;
        $this->container['imageDataList'] = isset($data['imageDataList']) ? $data['imageDataList'] : null;
        $this->container['remark'] = isset($data['remark']) ? $data['remark'] : null;
    }

    /**
    * Show all the invalid properties with reasons.
    *
    * @return array invalid properties with reasons
    */
    public function listInvalidProperties()
    {
        $invalidProperties = [];
        if ($this->container['imageType'] === null) {
            $invalidProperties[] = "'imageType' can't be null";
        }
            if ((mb_strlen($this->container['imageType']) > 128)) {
                $invalidProperties[] = "invalid value for 'imageType', the character length must be smaller than or equal to 128.";
            }
            if ((mb_strlen($this->container['imageType']) < 0)) {
                $invalidProperties[] = "invalid value for 'imageType', the character length must be bigger than or equal to 0.";
            }
            if (!preg_match("/^local|registry|cicd$/", $this->container['imageType'])) {
                $invalidProperties[] = "invalid value for 'imageType', must be conform to the pattern /^local|registry|cicd$/.";
            }
        if ($this->container['type'] === null) {
            $invalidProperties[] = "'type' can't be null";
        }
            if ((mb_strlen($this->container['type']) > 128)) {
                $invalidProperties[] = "invalid value for 'type', the character length must be smaller than or equal to 128.";
            }
            if ((mb_strlen($this->container['type']) < 0)) {
                $invalidProperties[] = "invalid value for 'type', the character length must be bigger than or equal to 0.";
            }
            if (!preg_match("/^linux_vul|app_vul$/", $this->container['type'])) {
                $invalidProperties[] = "invalid value for 'type', must be conform to the pattern /^linux_vul|app_vul$/.";
            }
        if ($this->container['operateType'] === null) {
            $invalidProperties[] = "'operateType' can't be null";
        }
            if ((mb_strlen($this->container['operateType']) > 128)) {
                $invalidProperties[] = "invalid value for 'operateType', the character length must be smaller than or equal to 128.";
            }
            if ((mb_strlen($this->container['operateType']) < 0)) {
                $invalidProperties[] = "invalid value for 'operateType', the character length must be bigger than or equal to 0.";
            }
            if (!preg_match("/^ignore|not_ignore|manual_repair|add_to_whitelist$/", $this->container['operateType'])) {
                $invalidProperties[] = "invalid value for 'operateType', must be conform to the pattern /^ignore|not_ignore|manual_repair|add_to_whitelist$/.";
            }
            if (!is_null($this->container['handleStatus']) && (mb_strlen($this->container['handleStatus']) > 128)) {
                $invalidProperties[] = "invalid value for 'handleStatus', the character length must be smaller than or equal to 128.";
            }
            if (!is_null($this->container['handleStatus']) && (mb_strlen($this->container['handleStatus']) < 0)) {
                $invalidProperties[] = "invalid value for 'handleStatus', the character length must be bigger than or equal to 0.";
            }
            if (!is_null($this->container['handleStatus']) && !preg_match("/^unhandled|handled$/", $this->container['handleStatus'])) {
                $invalidProperties[] = "invalid value for 'handleStatus', must be conform to the pattern /^unhandled|handled$/.";
            }
        if ($this->container['selectType'] === null) {
            $invalidProperties[] = "'selectType' can't be null";
        }
            if ((mb_strlen($this->container['selectType']) > 128)) {
                $invalidProperties[] = "invalid value for 'selectType', the character length must be smaller than or equal to 128.";
            }
            if ((mb_strlen($this->container['selectType']) < 0)) {
                $invalidProperties[] = "invalid value for 'selectType', the character length must be bigger than or equal to 0.";
            }
            if (!preg_match("/^all_vul|specific_image_all_vul|specific_vul_all_image|vul_view|image_view$/", $this->container['selectType'])) {
                $invalidProperties[] = "invalid value for 'selectType', must be conform to the pattern /^all_vul|specific_image_all_vul|specific_vul_all_image|vul_view|image_view$/.";
            }
            if (!is_null($this->container['remark']) && (mb_strlen($this->container['remark']) > 512)) {
                $invalidProperties[] = "invalid value for 'remark', the character length must be smaller than or equal to 512.";
            }
            if (!is_null($this->container['remark']) && (mb_strlen($this->container['remark']) < 0)) {
                $invalidProperties[] = "invalid value for 'remark', the character length must be bigger than or equal to 0.";
            }
        return $invalidProperties;
    }

    /**
    * Validate all the properties in the model
    * return true if all passed
    *
    * @return bool True if all properties are valid
    */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }

    /**
    * Gets imageType
    *  **参数解释**: 镜像类型 **约束限制**: 不涉及 **取值范围**: - local：本地镜像 - registry：仓库镜像 - cicd：cicd镜像  **默认取值**: 不涉及
    *
    * @return string
    */
    public function getImageType()
    {
        return $this->container['imageType'];
    }

    /**
    * Sets imageType
    *
    * @param string $imageType **参数解释**: 镜像类型 **约束限制**: 不涉及 **取值范围**: - local：本地镜像 - registry：仓库镜像 - cicd：cicd镜像  **默认取值**: 不涉及
    *
    * @return $this
    */
    public function setImageType($imageType)
    {
        $this->container['imageType'] = $imageType;
        return $this;
    }

    /**
    * Gets type
    *  **参数解释**: 漏洞类型 **约束限制**: 不涉及 **取值范围**: - linux_vul：Linux系统漏洞 - app_vul：应用漏洞  **默认取值**: 不涉及
    *
    * @return string
    */
    public function getType()
    {
        return $this->container['type'];
    }

    /**
    * Sets type
    *
    * @param string $type **参数解释**: 漏洞类型 **约束限制**: 不涉及 **取值范围**: - linux_vul：Linux系统漏洞 - app_vul：应用漏洞  **默认取值**: 不涉及
    *
    * @return $this
    */
    public function setType($type)
    {
        $this->container['type'] = $type;
        return $this;
    }

    /**
    * Gets operateType
    *  **参数解释**: 对漏洞做的处置动作 **约束限制**: 不涉及 **取值范围**: - ignore：忽略 - not_ignore：取消忽略 - manual_repair：人工修复 - add_to_whitelist：加白  **默认取值**: 不涉及
    *
    * @return string
    */
    public function getOperateType()
    {
        return $this->container['operateType'];
    }

    /**
    * Sets operateType
    *
    * @param string $operateType **参数解释**: 对漏洞做的处置动作 **约束限制**: 不涉及 **取值范围**: - ignore：忽略 - not_ignore：取消忽略 - manual_repair：人工修复 - add_to_whitelist：加白  **默认取值**: 不涉及
    *
    * @return $this
    */
    public function setOperateType($operateType)
    {
        $this->container['operateType'] = $operateType;
        return $this;
    }

    /**
    * Gets handleStatus
    *  **参数解释**: 需要处置的漏洞状态 **约束限制**: 不涉及 **取值范围**: - unhandled：待处理的漏洞 - handled：已处理的漏洞  **默认取值**: 不涉及
    *
    * @return string|null
    */
    public function getHandleStatus()
    {
        return $this->container['handleStatus'];
    }

    /**
    * Sets handleStatus
    *
    * @param string|null $handleStatus **参数解释**: 需要处置的漏洞状态 **约束限制**: 不涉及 **取值范围**: - unhandled：待处理的漏洞 - handled：已处理的漏洞  **默认取值**: 不涉及
    *
    * @return $this
    */
    public function setHandleStatus($handleStatus)
    {
        $this->container['handleStatus'] = $handleStatus;
        return $this;
    }

    /**
    * Gets selectType
    *  **参数解释**: 处置漏洞范围的类型 **约束限制**: 不涉及 **取值范围**: - all_vul：处置所有漏洞 - specific_image_all_vul：处置指定镜像的所有漏洞 - specific_vul_all_image：处置指定漏洞的全部镜像 - vul_view：通过漏洞维度指定需要处置的漏洞和镜像信息 - image_view：通过镜像维度指定需要处置的漏洞和镜像信息  **默认取值**: 不涉及
    *
    * @return string
    */
    public function getSelectType()
    {
        return $this->container['selectType'];
    }

    /**
    * Sets selectType
    *
    * @param string $selectType **参数解释**: 处置漏洞范围的类型 **约束限制**: 不涉及 **取值范围**: - all_vul：处置所有漏洞 - specific_image_all_vul：处置指定镜像的所有漏洞 - specific_vul_all_image：处置指定漏洞的全部镜像 - vul_view：通过漏洞维度指定需要处置的漏洞和镜像信息 - image_view：通过镜像维度指定需要处置的漏洞和镜像信息  **默认取值**: 不涉及
    *
    * @return $this
    */
    public function setSelectType($selectType)
    {
        $this->container['selectType'] = $selectType;
        return $this;
    }

    /**
    * Gets imageIdList
    *  **参数解释**: select_type值为specific_image_all_vul时，该字段用于指定需要处置的镜像id列表 **约束限制**: 仅在select_type值为specific_image_all_vul时该字段有效 **取值范围**: 不涉及 **默认取值**: 不涉及
    *
    * @return string[]|null
    */
    public function getImageIdList()
    {
        return $this->container['imageIdList'];
    }

    /**
    * Sets imageIdList
    *
    * @param string[]|null $imageIdList **参数解释**: select_type值为specific_image_all_vul时，该字段用于指定需要处置的镜像id列表 **约束限制**: 仅在select_type值为specific_image_all_vul时该字段有效 **取值范围**: 不涉及 **默认取值**: 不涉及
    *
    * @return $this
    */
    public function setImageIdList($imageIdList)
    {
        $this->container['imageIdList'] = $imageIdList;
        return $this;
    }

    /**
    * Gets vulIdList
    *  **参数解释**: select_type值为specific_vul_all_image时，该字段用于指定需要处置的漏洞id列表 **约束限制**: 仅在select_type值为specific_vul_all_image时该字段有效 **取值范围**: 不涉及 **默认取值**: 不涉及
    *
    * @return string[]|null
    */
    public function getVulIdList()
    {
        return $this->container['vulIdList'];
    }

    /**
    * Sets vulIdList
    *
    * @param string[]|null $vulIdList **参数解释**: select_type值为specific_vul_all_image时，该字段用于指定需要处置的漏洞id列表 **约束限制**: 仅在select_type值为specific_vul_all_image时该字段有效 **取值范围**: 不涉及 **默认取值**: 不涉及
    *
    * @return $this
    */
    public function setVulIdList($vulIdList)
    {
        $this->container['vulIdList'] = $vulIdList;
        return $this;
    }

    /**
    * Gets vulDataList
    *  **参数解释**: select_type值为vul_view时，该字段用于指定需要处置的漏洞和镜像信息 **约束限制**: 仅在select_type值为vul_view时该字段有效 **取值范围**: 不涉及 **默认取值**: 不涉及
    *
    * @return \HuaweiCloud\SDK\Hss\V5\Model\HandleImageVulnerabilityRequestBodyVulDataList[]|null
    */
    public function getVulDataList()
    {
        return $this->container['vulDataList'];
    }

    /**
    * Sets vulDataList
    *
    * @param \HuaweiCloud\SDK\Hss\V5\Model\HandleImageVulnerabilityRequestBodyVulDataList[]|null $vulDataList **参数解释**: select_type值为vul_view时，该字段用于指定需要处置的漏洞和镜像信息 **约束限制**: 仅在select_type值为vul_view时该字段有效 **取值范围**: 不涉及 **默认取值**: 不涉及
    *
    * @return $this
    */
    public function setVulDataList($vulDataList)
    {
        $this->container['vulDataList'] = $vulDataList;
        return $this;
    }

    /**
    * Gets imageDataList
    *  **参数解释**: select_type值为image_view时，该字段用于指定需要处置的漏洞和镜像信息 **约束限制**: 仅在select_type值为image_view时该字段有效 **取值范围**: 不涉及 **默认取值**: 不涉及
    *
    * @return \HuaweiCloud\SDK\Hss\V5\Model\HandleImageVulnerabilityRequestBodyImageDataList[]|null
    */
    public function getImageDataList()
    {
        return $this->container['imageDataList'];
    }

    /**
    * Sets imageDataList
    *
    * @param \HuaweiCloud\SDK\Hss\V5\Model\HandleImageVulnerabilityRequestBodyImageDataList[]|null $imageDataList **参数解释**: select_type值为image_view时，该字段用于指定需要处置的漏洞和镜像信息 **约束限制**: 仅在select_type值为image_view时该字段有效 **取值范围**: 不涉及 **默认取值**: 不涉及
    *
    * @return $this
    */
    public function setImageDataList($imageDataList)
    {
        $this->container['imageDataList'] = $imageDataList;
        return $this;
    }

    /**
    * Gets remark
    *  **参数解释**: 处置操作的描述信息 **约束限制**: 不涉及 **取值范围**: 字符长度0-512位 **默认取值**: 不涉及
    *
    * @return string|null
    */
    public function getRemark()
    {
        return $this->container['remark'];
    }

    /**
    * Sets remark
    *
    * @param string|null $remark **参数解释**: 处置操作的描述信息 **约束限制**: 不涉及 **取值范围**: 字符长度0-512位 **默认取值**: 不涉及
    *
    * @return $this
    */
    public function setRemark($remark)
    {
        $this->container['remark'] = $remark;
        return $this;
    }

    /**
    * Returns true if offset exists. False otherwise.
    *
    * @param integer $offset Offset
    *
    * @return boolean
    */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
    * Gets offset.
    *
    * @param integer $offset Offset
    *
    * @return mixed
    */
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
    * Sets value based on offset.
    *
    * @param integer $offset Offset
    * @param mixed   $value  Value to be set
    *
    * @return void
    */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
                $this->container[] = $value;
            } else {
                $this->container[$offset] = $value;
        }
    }

    /**
    * Unsets offset.
    *
    * @param integer $offset Offset
    *
    * @return void
    */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
    * Gets the string presentation of the object
    *
    * @return string
    */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }
}

